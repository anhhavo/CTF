#!/usr/bin/env python3

from Crypto.Util.number import long_to_bytes
from Crypto.Util import number
import gmpy2
import os
import binascii
from sympy.ntheory.residue_ntheory import discrete_log
import sys
import math
import argparse
import subprocess
import socket
import re
from pwn  import *

p = 21715527412966631469552971169690128914062132118754918283497731012401819458899160644271200984004877991667698112111969859554672248832332341601818361659117300292394912107010536406527665819151052443699635469973012963906675594556841842816188836789562579097722593159433568704132198828039413395154960077442866739275639160772090039380941130568463418468068212798701517653648598178664137788181578590797421288972063084123880597980014584467405064300216976234905476393699113021738776957524460347175348677928965863838648282171908681617230540393901458294493124113826454719386324836823535815507071098688985018508655747533191750892299
g = 2
def power(x,y,m):
	if (y==0):
		return 1
	p = power(x,y // 2, m) % m
	p = (p*p) % m
	if (y%2 ==0):
		return p
	else:
		return ((x*p) % m)
def gcd(a,b):
	if (a ==0):
		return b
	return gcd(b%a,a)
def modInverse(a,m):
	#g = gcd(a,m)
	g = math.gcd(a,m)
	if (g != 1):
		print("Inverse doesn't exist")
	else:
		k = pow(a,m-2,m)
		return k
port = 4354
c = connect('crypto.utctf.live', port)
res = ""
while 1:
	response = c.recvline()
	res += response.decode()
	if (len(response) == 33):
		break
temp = re.findall(r'\d+', res)
result = list(map(int,temp))
y = (result[3])
pq =modInverse(y,p)
j = 0
flag=""
find = "flag".encode()
m = ""

for j in range(256):
	print(response)
	k = 2 ** j
	if (j%2 == 0):		
		c.send(str(k)+'\n')
		response = (c.recvline())
		print(response)
		flag += response.decode()
		c.send(str(j)+'\n')	
		response = (c.recvline())	
		print(response)
		flag += response.decode()
	else:
		c.send(str(k*pq)+'\n')
		response = (c.recvline())
		print(response)
		flag += response.decode()
		c.send(str(j)+'\n')
		response = (c.recvline())
		print(response)
		flag += response.decode()

print(c.recvline())
c.close()






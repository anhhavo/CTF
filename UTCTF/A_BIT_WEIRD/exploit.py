#!/usr/bin/env python3

from Crypto.Util import number
from Crypto.Util.number import long_to_bytes, bytes_to_long
import gmpy2
import os
import binascii
import math
from rsa import common
from binascii import hexlify, unhexlify

length = 2048
n = 13876129555781460073002089038351520612247655754841714940325194761154811715694900213267064079029042442997358889794972854389557630367771777876508793474170741947269348292776484727853353467216624504502363412563718921205109890927597601496686803975210884730367005708579251258930365320553408690272909557812147058458101934416094961654819292033675534518433169541534918719715858981571188058387655828559632455020249603990658414972550914448303438265789951615868454921813881331283621117678174520240951067354671343645161030847894042795249824975975123293970250188757622530156083354425897120362794296499989540418235408089516991225649
ct = 6581985633799906892057438125576915919729685289065773835188688336898671475090397283236146369846971577536055404744552000913009436345090659234890289251210725630126240983696894267667325908895755610921151796076651419491871249815427670907081328324660532079703528042745484899868019846050803531065674821086527587813490634542863407667629281865859168224431930971680966013847327545587494254199639534463557869211251870726331441006052480498353072578366929904335644501242811360758566122007864009155945266316460389696089058959764212987491632905588143831831973272715981653196928234595155023233235134284082645872266135170511490429493
e = 3
mandx = 947571396785487533546146461810836349016633316292485079213681708490477178328756478620234135446017364353903883460574081324427546739724
x = 15581107453382746363421172426030468550126181195076252322042322859748260918197659408344673747013982937921433767135271108413165955808652424700637809308565928462367274272294975755415573706749109706624868830430686443947948537923430882747239965780990192617072654390726447304728671150888061906213977961981340995242772304458476566590730032592047868074968609272272687908019911741096824092090512588043445300077973100189180460193467125092550001098696240395535375456357081981657552860000358049631730893603020057137233513015505547751597823505590900290756694837641762534009330797696018713622218806608741753325137365900124739257740
test = 1234567890
i=0
p = number.getPrime(length//2)
q = number.getPrime(length//2)

print(p)
print(q)



			
'''
#print(p)
print('------------------------------------')
#print(q)

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)
def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise 'Modular inverse does not exist.'
    else:
        return x % m
phi = (p-1) * (q-1)
d = modinv(3,phi)
print(d)
'''



	
#m = number.bytes_to_long('Drmhze6EPcv0fN_81Bj-nA')
#x = number.bytes_to_long(os.urandom(length//8))

#print(str(123456)[-2:])

# print(recur(7*7))





''' This is Illegal Prime
#print(int("0x2f7f63b5e27343dcf750bf83fb4893fe3b20a87e81e6fb62c33d30",0))
c = 19539385573013577694361161503943160141452606565711460765249256752
pc = 37041565577102052619522926649931681176421097020148208559546571853
p = 56594044391339477686029513026021974392498922525513994709310909529135745009448534622250639333011770158535778535848522177601610597930145120019374953248865595853915254057748042248348224821499113613633807994411737092129239655022633988633736058693251230631716531822464530907151
p1 = hex(p)

print(hex(c^pc))
print(binascii.unhexlify("7574666c61677b7072316d335f6372316d33735f5f5f5f2121217d"))
#print(binascii.unhexlify("6b203d203561306230356439383331343338616338353631643262306134326265316366353631336462323164656239613434336532316334640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f"))

(mxorx,t)= (gmpy2.iroot(ct,3))
#print(t)
m_enc =~(x & (~mandx))
mm = (m_enc & mandx)
#pp = (long_to_bytes(p))
'''

'''
p=4315891123054519227800425234439024406406805990983946954154956695012431283551657417585179574642755601169096280017484467053951914982126613234225200384245049037787654523558017678649278076716108200271927575791497929092184238813619846729315518237924881623603111094979071286017407153529043066655388316378457694291590703681341752561492723137474482263373673210248633961843479034160811982934510083276506238457901538373531195688165166964398815874378480986164601388393975141268984935852959700100872597068350527482364309
print( hex(p))
print(binascii.unhexlify("504b0304140009000800910a83495435eceb2b0000001d00000008000000466c61672e747874567168e0247901d8bae9376014e1dba33d60231a36996b43e1f94d8fc0f9fa53e9dd803ecdae6d5f164db2504b07085435eceb2b0000001d000000504b01021f00140009000800910a83495435eceb2b0000001d000000080024000000000000002000000000000000466c61672e7478740a0020000000000001001800e4f6c610fb4cd201e90d9380f84cd20154178980f84cd201504b050600000000010001005a0000006100000000000195"))
p2 = binascii.unhexlify(hex(p)[2:-1])
p3 = bytearray(p2)

with open("dec9out",'w') as outfile:
    outfile.write(p2)

#print(long_to_bytes(mm).decode())
#print( 123&0)
#m2 = (m1.to_bytes(m1.bit_length() +7,byteorder='little', signed='True'))


#print(xxorm)
#print('\xff'.decode())
#print (str(m2))
#m = number.bytes_to_long(flag)
#print(mxorx + mandx - xc)
'''
